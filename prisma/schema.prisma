generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model users {
  id       String @id @default(uuid()) @db.Uuid
  name     String @db.VarChar(255)
  email    String @unique @db.Text
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices      invoices[]
  clientes      clientes[]
  investimentos investimentos[]

  @@index([email]) // Índice para buscas por email
}

model clientes {
  id    String @id @default(uuid()) @db.Uuid
  name  String @db.VarChar(255)
  email String @unique @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users  users?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @db.Uuid

  invoices      invoices[]
  investimentos investimentos[]

  @@index([name])
  @@index([email])
  @@index([userId])
}

model invoices {
  id        String   @id @default(uuid()) @db.Uuid
  amount    Int
  status    String   @db.VarChar(255)
  // date        DateTime @db.Date
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com o modelo Cliente (opcional, se existir)
  cliente    clientes @relation(fields: [cliente_id], references: [id], onDelete: Cascade)
  cliente_id String   @db.Uuid
  users      users?   @relation(fields: [usersId], references: [id])
  usersId    String?  @db.Uuid

  @@index([cliente_id]) // Índice para buscas por cliente
  @@index([cliente_id, date]) // Índice composto para buscas por cliente e data
  @@index([usersId])
}

model investimentos {
  id               String   @id @default(uuid()) @db.Uuid
  data             DateTime @db.Date
  ano              String   @db.VarChar(4)
  mes              String   @db.VarChar(2)
  rendimentoDoMes  Int
  dividendosDoMes  Int
  valorAplicado    Int
  saldoBruto       Int
  saldoAnterior    Int      @default(0)
  valorResgatado   Int
  impostoIncorrido Int
  impostoPrevisto  Int
  saldoLiquido     Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  clientes  clientes @relation(fields: [clienteId], references: [id])
  clienteId String   @db.Uuid

  bancos  bancos @relation(fields: [bancoId], references: [id])
  bancoId String @db.Uuid

  ativos  ativos @relation(fields: [ativoId], references: [id])
  ativoId String @db.Uuid

  users  users?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @db.Uuid

  @@index([ano])
  @@index([mes])
  @@index([clienteId])
  @@index([bancoId])
  @@index([ativoId])
  @@index([ano, mes, clienteId])
  @@index([ano, mes, clienteId, bancoId])
  @@index([ano, mes, clienteId, bancoId, ativoId])
  @@index([userId])
}

model tipos {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ativos ativos[]

  @@index([nome])
}

model ativos {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tipos  tipos?  @relation(fields: [tipoId], references: [id])
  tipoId String? @db.Uuid

  // Relacionamento muitos-para-muitos com categorias
  ativo_categorias ativo_categoria[]

  investimentos investimentos[]

  @@index([tipoId])
  @@index([nome])
}

// Tabela de junção para relacionamento muitos-para-muitos
model ativo_categoria {
  ativoId     String   @db.Uuid
  categoriaId String   @db.Uuid
  createdAt   DateTime @default(now())

  ativo     ativos     @relation(fields: [ativoId], references: [id], onDelete: Cascade)
  categoria categorias @relation(fields: [categoriaId], references: [id], onDelete: Cascade)

  @@id([ativoId, categoriaId])
  @@index([ativoId])
  @@index([categoriaId])
}

model categorias {
  id   String @id @default(uuid()) @db.Uuid
  nome String @db.VarChar(255)

  // Campo para armazenar o ID da categoria pai
  parentId String? @db.Uuid // Pode ser nulo para categorias de nível superior

  // Relacionamento com a categoria pai
  // O nome da relação "SubCategories" é uma convenção para diferenciar este lado do relacionamento
  parent categorias? @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull)

  // Relacionamento com as subcategorias (filhas)
  subCategories categorias[] @relation("SubCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoria_ativos ativo_categoria[]
  // Se você está usando ativo_categoria para muitos-para-muitos, esta linha deve ser removida:
  // ativos          ativos[]

  @@index([nome])
  @@index([parentId]) // É crucial indexar o parentId para buscas eficientes
}

model bancos {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  investimentos investimentos[]

  @@index([nome])
}

model revenue {
  month     String   @id @db.VarChar(4)
  revenue   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// // Enum's
// enum Indexador {
//   CDI
//   IPCA
//   SELIC
//   PREFIXADO
// }
