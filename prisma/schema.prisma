generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model users {
  id       String @id @default(uuid()) @db.Uuid
  name     String @db.VarChar(255)
  email    String @unique @db.Text
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices      invoices[]
  clientes      clientes[]
  investimentos investimentos[]

  @@index([email]) // Índice para buscas por email
}

model clientes {
  id    String @id @default(uuid()) @db.Uuid
  name  String @db.VarChar(255)
  email String @unique @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users  users?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @db.Uuid

  invoices      invoices[]
  investimentos investimentos[]

  @@index([name])
  @@index([email])
  @@index([userId])
}

model invoices {
  id        String   @id @default(uuid()) @db.Uuid
  amount    Int
  status    String   @db.VarChar(255)
  // date        DateTime @db.Date
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com o modelo Cliente (opcional, se existir)
  cliente    clientes @relation(fields: [cliente_id], references: [id], onDelete: Cascade)
  cliente_id String   @db.Uuid
  users      users?   @relation(fields: [usersId], references: [id])
  usersId    String?  @db.Uuid

  @@index([cliente_id]) // Índice para buscas por cliente
  @@index([cliente_id, date]) // Índice composto para buscas por cliente e data
  @@index([usersId])
}

model investimentos {
  id                                  String   @id @default(uuid()) @db.Uuid
  data                                DateTime @db.Date
  ano                                 String   @db.VarChar(4)
  mes                                 String   @db.VarChar(2)
  rendimentoDoMes                     Int
  dividendosDoMes                     Int
  valorAplicado                       Int
  saldoBruto                          Int
  percentualDeCrescimentoSaldoBruto   Float?
  valorResgatado                      Int
  impostoIncorrido                    Int
  impostoPrevisto                     Int
  saldoLiquido                        Int
  percentualDeCrescimentoSaldoLiquido Float?
  createdAt                           DateTime @default(now())
  updatedAt                           DateTime @updatedAt

  clientes  clientes @relation(fields: [clienteId], references: [id])
  clienteId String   @db.Uuid

  bancos  bancos @relation(fields: [bancoId], references: [id])
  bancoId String @db.Uuid

  ativos  ativos @relation(fields: [ativoId], references: [id])
  ativoId String @db.Uuid

  users  users?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @db.Uuid

  @@index([ano])
  @@index([mes])
  @@index([clienteId])
  @@index([bancoId])
  @@index([ativoId])
  @@index([ano, mes, clienteId])
  @@index([ano, mes, clienteId, bancoId])
  @@index([ano, mes, clienteId, bancoId, ativoId])
  @@index([userId])
}

model ativos {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tipos  tipos?  @relation(fields: [tipoId], references: [id])
  tipoId String? @db.Uuid

  // taxas  taxas?  @relation(fields: [taxaId], references: [id])
  // taxaId String? @db.Uuid

  investimentos investimentos[]

  @@index([tipoId])
  @@index([nome])
}

model tipos {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ativos ativos[]

  @@index([nome])
}

model bancos {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  investimentos investimentos[]

  @@index([nome])
}

model revenue {
  month     String   @id @db.VarChar(4)
  revenue   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// // Enum's
// enum Indexador {
//   CDI
//   IPCA
//   SELIC
//   PREFIXADO
// }

// model taxas {
//   id         String    @id @default(uuid()) @db.Uuid
//   indexador  Indexador
//   percentual Decimal
//   taxaAnual  Decimal
//   createdAt  DateTime  @default(now()) @db.Date
//   updatedAt  DateTime  @updatedAt

//   ativos ativos[]
// }
